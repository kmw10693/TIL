서버, 서비스 : 
네트워크에서 다른 컴퓨터나 소프트웨어와 같은 클라이언트에게 서비스를 제공하는 컴퓨터
서버는 클라이언트에게 여러 가지 서비스를 제공하는 것을 뜻함

클라이언트 - 서버 관계 :
서버는 클라이언트에게 여러 가지 서비스를 제공하는 것을 뜻함.
예를 들어, 웹 브라우저를 엑세스 할 때 → 웹 브라우저(클라이언트), 웹 사이트의 콘텐츠가 있는 컴퓨터(서버)
서버는 클라이언트로부터 요청(Request)를 받아야 처리를 시작하여 서비스를 제공한다

<처리 과정>
1. 클라이언트가 서버에게 어떤 서비스를 요청
2. 서버는 요청에 응답해 처리를 수행
3. 서버는 처리 결과를 클라이언트에게 반환
4. 클라이언트는 처리 결과를 받음

서버의 동작 방식과 순서(요청이 들어왔을 때 서비스가 어떻게 처리되는가?)

1. 클라이언트가 서버에게 어떤 서비스를 요청
2. 서버는 요청에 응답해 처리를 수행
3. 서버는 처리 결과를 클라이언트에게 반환
4. 클라이언트는 처리 결과를 받음

웹 브라우저 예시(크롬이나 사파리)

1. 웹 브라우저가 웹 서버에게 'www.naver.com' 사이트 데이터를 달라고 요청
2. 웹 서버는 해당 사이트의 파일을 찾음
3. 웹 서버는 찾은 파일을 웹 브라우저에게 반환
4. 웹 브라우저는 파일을 받아 네이버 메인을 화면에 표시

서버의 구조
Server Program 
하드웨어 측면: 웹서버의 소프트웨어와 컴포넌트 파일을 저장하는 컴퓨터 (컴포넌트 파일: HTML 문서, 이미지, CSS stylesheets, JavaScript files..). 웹 서버는 인터넷에 연결되어 웹에 연결된 기기들이 웹 서버의 데이터를 주고 받을 수 있도록 한다.

소프트웨어 측면:  웹 서버는 기본적으로 웹 사용자가 어떻게 호스트 파일에 접근하는 지를 관리함.  웹서버: HTTP 서버로 이해할 수 있다. HTTP 서버는 URL(Web address)와 HTTP의 소프트웨어 일부이다.

웹 서버의 주된 기능: 
웹 페이지를 클라이언트로 전달

주로 HTML, CSS, Javascript, Image (정적인 정보) 가 클라이언트로 전달
주된 기능은 콘텐츠를 제공하는 것이지만 클라이언트로부터 콘텐츠를 전달 받는 것도 웹 서버의 기능에 속한다. 대표적인 웹서버는 IIS, Apache, Nginx, GWS등이 있다.

브라우저가 웹 서버의 파일을 필요로 할 때, 브라우저는 HTTP를 통해 파일 요청 

요청이 웹서버(하드웨어)로 도달 → HTTP 서버(소프트웨어)는 요청된 파일을 HTTP를 통해 전달

**정적 웹 서버**: HTTP 서버(소프트웨어)가 있는 컴퓨터(하드웨어)로 구성. 서버가 파일을 요청한 브라우저에게 전송하기 때문에 '정적'이라고 불림 / 단순히 HTML 문서만을 사용자에게 제공

**동적 웹 서버**: 정적 웹서버 + 추가적인 소프트웨어(일반적인 애플리케이션 서버, 데이터베이스) 애플리케이션 서버가 HTTP 서버를 통해 브라우저로 파일을 전송하기 전에 애플리케이션 서버가 업데이트(동적이라고 불리는 이유)

사용자의 요구에 따라 다양한 웹 페이지를 제공하기 때문에 (php와 MySQL 과 같은 데이터 베이스를 연계하여 사용 (APM, 리눅스에서는 LAMP)

nginx:
엔진엑스(Nginx)는 Igor Sysoev 라는 러시아 개발자가 개발한 동시접속 처리에 특화된 웹 서버 프로그램

Apache보다 동작이 단순하고, 전달자 역할만 하기 때문에 동시접속 처리에 특화

동시접속자(약 700명) 이상이라면 서버를 증설하거나 Nginx 환경을 권장한다고 함.

Nginx(웹서버)의 역할

1. 정적 파일을 처리하는 HTTP 서버로서의 역할
2. 응용프로그램 서버에 요청을 보내는 리버스 프록시로서의 역할

Nginx는 비동기 처리 방식 채택

apache:
Apache HTTP server(HTTPD)라고 불리며, 오픈소스 소프트웨어 그룹인 아파치 소프트웨어 재단에서 만든 웹서버 프로그램이다.

유닉스 기반 프로그램 → 리눅스 서버에서 더 지원이 잘 된다.
구축이 쉽고 다양한 추가 기능을 가지고 있기 때문에 현재 가장 인기있는 웹서버로 이용되고 있음.

- Spring: JAVA의 웹 프레임워크로 JAVA 언어를 기반으로 사용 (JAVA 기술들을 더 쉽게 사용할 수 있게 해주는 오픈소스 프레임 워크)
- JAVA로 다양한 어플리케이션을 만들기 위한 프로그래밍 툴
- 동적인 웹 사이트를 개발하기 위한 여러 가지 서비스를 제공

<장점>

- Spring은 이런 중복코드의 사용률을 줄여주고, 비즈니스 로직을 더 간단하게 할 수 있음.
- 오픈소스를 좀더 효율적으로 가져다 쓰기 좋은 구조
Spring Boot: 스프링 프레임워크를 사용하기 위한 설정의 많은 부분을 자동화하여 사용자가 정말 편하게 스프링을 활용할 수 있도록 돕는다. 

<장점>
- 스프링 부트 starter 디펜던시만 추가해주면 바로 API를 정의하고, 내장된 탐캣이나 제티로 웹 애플리케이션 서버를 실행할 수 있다.

<스프링 부트와 스프링 차이점>
- 1) Embed Tomcat을 사용하기 때문에, (Spring Boot 내부에 Tomcat이 포함되어있다.) 따로 Tomcat을 설치하거나 매번 버전을 관리해 주어야 하는 수고로움을 덜어준다.

- 2) starter을 통한 dependency 자동화 :과거 Spring framework에서는 각각의 dependency들의 호환되는 버전을 일일이 맞추어 주어야 했고, 때문에 하나의 버전을 올리고자 하면 다른 dependeny에 까지 영향을 미쳐 version관리에 어려움이 많았음.
- 하지만, 이제 starter가 대부분의 dependency를 관리해주기 때문에 이러한 걱정을 많이 덜게 되었다.

- javascript - node.js, express

    node.js: Chrome V8 Javascript 엔진으로 빌드된 Javascript 런타임/ 자바스크립트를 브라우저 밖에서 사용하게 해주는 프로그램

    노드를 통해 다양한 자바스크립트 애플리케이션을 실행할 수 있으며, 서버를 실행하는데 제일 많이 사용됨.

    자바스크립트 런타임: 런타임은 특정 언어로 만든 프로그램들을 실행할 수 있는 환경을 뜻함. 따라서 노드는 자바스크립트 프로그램을 컴퓨터에서 실행할 수 있다.

    이벤트 기반: 이벤트 기반(event-driven)이란 이벤트가 발생할 때 미리 지정해둔 작업을 수행하는 방식을 의미합니다. 특정 이벤트가 발생할 때 무엇을 할지 미리 등록해두고, 이를 이벤트 리스너에 콜백 함수를 등록 합니다. 

    이벤트가 발생하면 등록해둔 콜백 함수를 호출하며, 이벤트가 끝난 후 노드는 다음 이벤트가 발생할 때까지 대기합니다.

    express: Node.js를 위한 빠르고 개방적인 간결한 웹 프레임워크

    NodeJS를 사용하여 서버를 개발하고자 하는 개발자들을 위하여 서버를 쉽게 구성할 수 있게 만든 프레임워크(클래스, 라이브러리 집합체)

- python - django, flask

    Django 는 Python으로 만들어진 무료 오픈소스 web application framework 

    web application framework : 웹사이트 개발에 자주 사용하는 요소들을 갖춘 tool(회원가입, 로그인, 글쓰기 요소 등)

    Django : MVT(MVC) 모델 

    MVC : Model, View, Control 3가지로 부분으로 코드를 나누어 각각 관리하는 모델

    - Model : 데이터베이스 관련 로직
    - View : 웹브라우저에 실제로 보이는 부분에 관한 로직 **(장고에서는 Template)**
    - Control : View와 Model을 이어주는 로직 **(장고에서는 View가 Control의 역할)**

    Flask: 오스트리아의 오픈소스 개발자 아르민 로나허(Armin Ronacher)가 만든 파이썬 웹 프레임워크다.

    플라스크는 마이크로 웹 프레임워크: 프레임워크를 간결하게 유지하고 확장할 수 있도록 만듦
